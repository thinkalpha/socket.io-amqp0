version: 2

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: cimg/base:2021.01

aliases:
  - &install-nvs
    name: Install nvs
    command: |
      export NVS_HOME="$HOME/.nvs"
      git clone --branch=v1.6.0 --depth=1 https://github.com/jasongin/nvs "$NVS_HOME"
      echo 'export NVS_HOME="$HOME/.nvs"' >> $BASH_ENV
      echo '[ -s "$NVS_HOME/nvs.sh" ] && . "$NVS_HOME/nvs.sh"' >> $BASH_ENV
      echo 'nvs auto' >> $BASH_ENV

jobs:
  lint:
    <<: *defaults
    steps:
      - checkout
      - run: *install-nvs
      - run:
            name: Install pnpm
            command: corepack enable
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/repo/.npmrc
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: pnpm install
          command: pnpm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Lint
          command: pnpm run lint
  build:
    <<: *defaults
    steps:
      - checkout
      - run: *install-nvs
      - run:
            name: Install pnpm
            command: corepack enable
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/repo/.npmrc
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: pnpm install
          command: pnpm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Compile
          command: |
            pnpm build
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .
  test:
    <<: *defaults
    steps:
      - checkout
      - run: *install-nvs
      - run:
            name: Install pnpm
            command: corepack enable
      # - run:
      #     name: Setup HTTPS transport for apt-get
      #     command: |
      #       sudo apt-get update
      #       sudo apt-get install apt-transport-https
      - run:
          name: Setup erlang
          command: |
            wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb
            sudo dpkg -i erlang-solutions_2.0_all.deb
      - run:
          name: Setup RabbitMQ server
          command: |
            curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.deb.sh | sudo bash
            sudo apt-get install rabbitmq-server
            sudo service rabbitmq-server start
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/repo/.npmrc
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: pnpm install
          command: pnpm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Test
          command: pnpm test:ci
          environment:
            DEBUG: socket.io-client:* socket.io:* engine:* socket.io-sqs:* socket.io-sqs
            JEST_JUNIT_OUTPUT_DIR: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit/js-test-results.xml
  deploy:
    <<: *defaults  
    steps:
      - attach_workspace:
          at: ~/repo
      - run: *install-nvs
      - run:
          name: Configure Git
          command: |
            git config --global user.email donotreply@thinkalpha.io
            git config --global user.name "CircleCI Build"
      - run:
            name: Install pnpm
            command: corepack enable
      - run:
            name: Check changeset
            command: pnpm changeset status
      - run:
            name: Check Git Status
            command: |
                git --no-pager diff
      - run:
            name: Update version
            command: |
                pnpm changeset version
                pnpm install
                git add package.json CHANGELOG.md
                git commit -am "version update [ci skip]"
      - run:
            name: Publish package
            command: pnpm publish
      - run:
            name: Push new version into git
            command: |
                mkdir -p ~/.ssh/
                echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
                git push --follow-tags origin ${CIRCLE_BRANCH}

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - test
      - lint
      - deploy:
          requires:
            - lint
            - build
            - test
          filters:
            # tags:
            #   only: /^v.*/
            branches:
              # ignore: /.*/
              only:
                - main